#!/usr/bin/env bash

# ARG_OPTIONAL_SINGLE([directory],[d],[Output directory])
# ARG_POSITIONAL_SINGLE([url],[URL to start crawler],[])
# ARG_POSITIONAL_SINGLE([name],[Name used for the zim file],[])
# ARG_LEFTOVERS([Additional args to pass on (optional)])
# ARG_HELP([A helper tool for running zimit in a docker container. Additional arguments will be passed on to Browsertrix.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die() {
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}

begins_with_short_option() {
  local first_option all_short_options='dh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_leftovers=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_directory=

print_help() {
  printf '%s\n' "A helper tool for running zimit in a docker container. Additional arguments will be passed on to Browsertrix."
  printf 'Usage: %s [-d|--directory <arg>] [-h|--help] <url> <name> ... \n' "$0"
  printf '\t%s\n' "<url>: URL to start crawler"
  printf '\t%s\n' "<name>: Name used for the zim file"
  printf '\t%s\n' "... : Additional args to pass on (optional)"
  printf '\t%s\n' "-d, --directory: Output directory (no default)"
  printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
  _positionals_count=0
  while test $# -gt 0; do
    _key="$1"
    case "$_key" in
    -d | --directory)
      test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
      _arg_directory="$2"
      shift
      ;;
    --directory=*)
      _arg_directory="${_key##--directory=}"
      ;;
    -d*)
      _arg_directory="${_key##-d}"
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
    -h*)
      print_help
      exit 0
      ;;
    *)
      _last_positional="$1"
      _positionals+=("$_last_positional")
      _positionals_count=$((_positionals_count + 1))
      ;;
    esac
    shift
  done
}

handle_passed_args_count() {
  local _required_args_string="'url' and 'name'"
  test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}

assign_positional_args() {
  local _positional_name _shift_for=$1
  _positional_names="_arg_url _arg_name "
  _our_args=$((${#_positionals[@]} - 2))
  for ((ii = 0; ii < _our_args; ii++)); do
    _positional_names="$_positional_names _arg_leftovers[$((ii + 0))]"
  done

  shift "$_shift_for"
  for _positional_name in ${_positional_names}; do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

name="$_arg_name"
url="$_arg_url"
basedir="$_arg_directory"

dt=$(date +%m%d%Y)
file="$name-$dt"
shift 2

if [[ -z "$basedir" ]]; then
  basedir="."
fi

#docker run --rm --name atsdr-cdc-gov -v ./atsdr-cdc-gov:/output ghcr.io/openzim/zimit zimit --seeds https://atsdr.cdc.gov/ --name atsdr-cdc-gov-05022025 --pageLimit 3
mkdir -p "$basedir/$name"
existing=$(docker ps -a --filter "name=$name" -q)
if [ "$existing" ]; then
  docker rm "$name"
fi
docker run --rm -d \
  --name "$name" \
  -v "$basedir/$name":/output \
  ghcr.io/openzim/zimit \
  zimit \
  --seeds "$url" \
  --name "$file" \
  "${_arg_leftovers[@]}"
